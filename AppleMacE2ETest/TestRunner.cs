using System;
using System.Linq;
using System.Threading.Tasks;
using Microsoft.Playwright;

namespace AppleE2ETest
{
    public class TestRunner
    {
        public static async Task RunTestAsync()
        {
            using var playwright = await Playwright.CreateAsync();
            await using var browser = await playwright.Chromium.LaunchAsync(new()
            {
                Headless = true
            });

            var context = await browser.NewContextAsync();
            var page = await context.NewPageAsync();

            Console.WriteLine("üîó –ü–µ—Ä–µ—Ö–æ–¥–∏–º–æ –Ω–∞ —Å—Ç–æ—Ä—ñ–Ω–∫—É Apple Mac...");
            await page.GotoAsync("https://www.apple.com/mac/", new() { WaitUntil = WaitUntilState.NetworkIdle });

            Console.WriteLine("\nüß™ –ü–æ—á–∏–Ω–∞—î–º–æ –ø–µ—Ä–µ–≤—ñ—Ä–∫—É –ø—Ä–æ–¥—É–∫—Ç—ñ–≤:");
            var failed = false;

            foreach (var product in ProductList.Products)
            {
                var locator = page.Locator($"text={product}");
                var count = await locator.CountAsync();

                if (count > 0)
                {
                    Console.WriteLine($"‚úÖ –ó–Ω–∞–π–¥–µ–Ω–æ: {product}");
                }
                else
                {
                    Console.WriteLine($"‚ùå –ù–ï –∑–Ω–∞–π–¥–µ–Ω–æ: {product}");
                    failed = true;
                }
            }

            if (failed)
            {
                // –ó–±–µ—Ä–µ–≥—Ç–∏ —Å–∫—Ä—ñ–Ω—à–æ—Ç –Ω–∞ –≤–∏–ø–∞–¥–æ–∫ –ø–æ–º–∏–ª–∫–∏
                await page.ScreenshotAsync(new() { Path = "failure.png", FullPage = true });
                throw new Exception("‚ùå –î–µ—è–∫—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ –∞–±–æ —Å—Ç–∞–ª–∞—Å—è –ø–æ–º–∏–ª–∫–∞!");
            }

            Console.WriteLine("\nüéâ –£—Å—ñ –ø—Ä–æ–¥—É–∫—Ç–∏ –∑–Ω–∞–π–¥–µ–Ω–æ —É—Å–ø—ñ—à–Ω–æ!");
        }
    }
}
